package com.shopping.demo.ShoppingBackend.data.db;

import org.springframework.data.annotation.Id;

import java.util.Objects;

/**
 * This stores the user's name.
 * It is also a store of a user's passwords. Note we do *not* store passwords in plaintext, as
 * that's a security 101 no-no. Instead, when signing in, a user will pass their username and password to the backend.
 * We'll then generate a token(which just happens to be the user's hash'd password, because I needed to timebox this
 * work and didn't want to implement a proper api token), and set that
 * as an authentication cookie for the user. We then store the user's hashed password, salt, and username
 * in the backend.
 */

public class User {

    @Id
    public String userName;

    /**
     * A sha-256 hash of the user's password + salt;
     */
    public byte[] passwordHash;

    /**
     * The salt generated by the user when they first signed up
     */
    public byte[] salt;

    public User(String userName, byte[] passwordHash, byte[] salt) {
        this.userName = userName;
        this.passwordHash = passwordHash;
        this.salt = salt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return Objects.equals(userName, user.userName) &&
                Objects.equals(passwordHash, user.passwordHash) &&
                Objects.equals(salt, user.salt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(userName, passwordHash, salt);
    }
}
